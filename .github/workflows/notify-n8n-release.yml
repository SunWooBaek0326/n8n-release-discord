name: Notify n8n Releases to Discord

on:
  release:
    types: [published]        # 실시간: 릴리즈 공개 즉시
  schedule:
    - cron: "*/30 * * * *"    # 백업: 30분 폴링
  workflow_dispatch: {}       # 수동 실행(테스트용, 항상 전송)

permissions:
  contents: write             # .github/n8n_latest 커밋용

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      # 0) Webhook 시크릿 확인
      - name: Validate webhook secret
        run: |
          if [ -z "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
            echo "::error::Missing secret DISCORD_WEBHOOK_URL"
            exit 1
          fi

      # 1) Webhook 값 정규화 + 형식 점검
      - name: Normalize webhook value
        id: hook
        run: |
          CLEAN=$(printf "%s" "${{ secrets.DISCORD_WEBHOOK_URL }}" | tr -d '\r' | tr -d '\n' | xargs)
          case "$CLEAN" in
            https://discord.com/api/webhooks/*|https://discordapp.com/api/webhooks/*) : ;;
            *) echo "::error::Webhook URL looks invalid: $CLEAN"; exit 2 ;;
          esac
          echo "webhook=$CLEAN" >> "$GITHUB_OUTPUT"

      # 2) 이벤트 유형별 릴리즈 정보 준비 (멀티라인은 heredoc으로 출력)
      - name: Prepare release payload
        id: rel
        env:
          EVENT: ${{ github.event_name }}
        run: |
          set -e
          if [ "$EVENT" = "release" ]; then
            TAG='${{ github.event.release.tag_name }}'
            TITLE='${{ github.event.release.name }}'
            URL='${{ github.event.release.html_url }}'
            DATE='${{ github.event.release.published_at }}'
            BODY_RAW='${{ github.event.release.body }}'
          else
            RES=$(curl -s https://api.github.com/repos/n8n-io/n8n/releases/latest)
            TAG=$(echo "$RES"   | jq -r .tag_name)
            TITLE=$(echo "$RES" | jq -r .name)
            URL=$(echo "$RES"   | jq -r .html_url)
            DATE=$(echo "$RES"  | jq -r .published_at)
            BODY_RAW=$(echo "$RES" | jq -r .body)
          fi

          [ -z "$TITLE" -o "$TITLE" = "null" ] && TITLE="n8n @$TAG"
          DATE_SHORT=$(echo "$DATE" | cut -dT -f1)
          BODY_TRIM=$(printf "%s" "$BODY_RAW" | tr -d '\r' | sed 's/\x1b\[[0-9;]*m//g' | head -c 1800)
          [ "$BODY_TRIM" = "null" ] && BODY_TRIM=""

          echo "tag=$TAG"         >> "$GITHUB_OUTPUT"
          echo "title=$TITLE"     >> "$GITHUB_OUTPUT"
          echo "url=$URL"         >> "$GITHUB_OUTPUT"
          echo "date=$DATE_SHORT" >> "$GITHUB_OUTPUT"
          {
            echo "body<<__REL_BODY__"
            printf '%s\n' "$BODY_TRIM"
            echo "__REL_BODY__"
          } >> "$GITHUB_OUTPUT"

      # 3) 이전에 보낸 태그 읽기 (폴링/자동 시 중복 방지용)
      - name: Read previous tag
        id: prev
        run: |
          FILE=".github/n8n_latest"
          if [ -f "$FILE" ]; then PREV=$(cat "$FILE"); else PREV=""; fi
          echo "prev=$PREV" >> "$GITHUB_OUTPUT"

      # 4) 모드/중복 여부 결정
      - name: Decide sending mode
        id: decide
        env:
          EVENT: ${{ github.event_name }}
          PREV:  ${{ steps.prev.outputs.prev }}
          CURR:  ${{ steps.rel.outputs.tag }}
        run: |
          # release: 무조건 전송 + 기록 갱신
          if [ "$EVENT" = "release" ]; then
            echo "mode=push"     >> "$GITHUB_OUTPUT"
            echo "changed=true"  >> "$GITHUB_OUTPUT"
            echo "update_tag=1"  >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # workflow_dispatch(수동): 무조건 전송(기록 갱신하지 않음)
          if [ "$EVENT" = "workflow_dispatch" ]; then
            echo "mode=manual"   >> "$GITHUB_OUTPUT"
            echo "changed=true"  >> "$GITHUB_OUTPUT"
            echo "update_tag=0"  >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # schedule(폴링): 새 태그일 때만 전송 + 기록 갱신
          CHANGED="false"; [ "$PREV" != "$CURR" ] && CHANGED="true"
          echo "mode=auto"        >> "$GITHUB_OUTPUT"
          echo "changed=$CHANGED" >> "$GITHUB_OUTPUT"
          if [ "$CHANGED" = "true" ]; then
            echo "update_tag=1"   >> "$GITHUB_OUTPUT"
          else
            echo "update_tag=0"   >> "$GITHUB_OUTPUT"
          fi

      # 5) Discord 전송 (수동/릴리즈는 항상, 폴링은 변경 시만)
      - name: Send to Discord
        if: steps.decide.outputs.changed == 'true'
        env:
          WEBHOOK: ${{ steps.hook.outputs.webhook }}
          TAG:     ${{ steps.rel.outputs.tag }}
          TITLE:   ${{ steps.rel.outputs.title }}
          URL:     ${{ steps.rel.outputs.url }}
          DATE:    ${{ steps.rel.outputs.date }}
          BODY:    ${{ steps.rel.outputs.body }}
        run: |
          set -e
          # printf로 개행을 명시적으로 넣어 Discord에서 줄바꿈이 정확히 보이게 함
          DESC=$(printf "**%s** released on %s\n\n%s" "$TAG" "$DATE" "$BODY")
          jq -n \
            --arg title "$TITLE" \
            --arg url   "$URL" \
            --arg desc  "$DESC" \
            '{embeds:[{title:$title, url:$url, description:$desc}]}' \
          | curl -sS -H "Content-Type: application/json" -d @- "$WEBHOOK" -w "\nHTTP %{http_code}\n"

      # 6) 기록 파일 갱신 (수동은 갱신 안 함, push 실패는 무시)
      - name: Update last sent tag (tolerant push)
        if: steps.decide.outputs.update_tag == '1'
        run: |
          mkdir -p .github
          echo "${{ steps.rel.outputs.tag }}" > .github/n8n_latest
          git config user.name  "actions-bot"
          git config user.email "actions-bot@users.noreply.github.com"
          git add .github/n8n_latest
          git commit -m "chore: update latest n8n tag to ${{ steps.rel.outputs.tag }}" || echo "nothing to commit"
          git pull --rebase || echo "skip rebase"
          git push || echo "skip push"
