name: Notify n8n Releases to Discord

on:
  schedule:
    - cron: "*/30 * * * *"     # 30분마다 자동 실행(UTC)
  workflow_dispatch: {}        # 수동 실행 버튼

permissions:
  contents: write              # .github/n8n_latest 커밋용

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      # 1) 시크릿 유무 확인
      - name: Validate webhook secret
        run: |
          if [ -z "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
            echo "::error::Missing secret DISCORD_WEBHOOK_URL"
            exit 1
          fi

      # 2) 시크릿 정규화(공백/줄바꿈 제거) + 형식 점검
      - name: Normalize webhook value
        id: hook
        run: |
          CLEAN=$(printf "%s" "${{ secrets.DISCORD_WEBHOOK_URL }}" \
                  | tr -d '\r' | tr -d '\n' | xargs)
          case "$CLEAN" in
            https://discord.com/api/webhooks/*|https://discordapp.com/api/webhooks/*) : ;;
            *) echo "::error::Webhook URL looks invalid: $CLEAN"; exit 2 ;;
          esac
          echo "webhook=$CLEAN" >> $GITHUB_OUTPUT

      # 3) 최신 n8n 릴리스 조회
      - name: Fetch latest n8n release
        id: latest
        run: |
          RES=$(curl -s https://api.github.com/repos/n8n-io/n8n/releases/latest)
          TAG=$(echo "$RES"  | jq -r .tag_name)           # 예: 1.108.2
          DATE=$(echo "$RES" | jq -r .published_at | cut -dT -f1)
          URL=$(echo "$RES"  | jq -r .html_url)
          echo "tag=$TAG"   >> $GITHUB_OUTPUT
          echo "date=$DATE" >> $GITHUB_OUTPUT
          echo "url=$URL"   >> $GITHUB_OUTPUT

      # 4) 이전 전송 태그 읽기
      - name: Read previous tag from repo
        id: prev
        run: |
          FILE=".github/n8n_latest"
          if [ -f "$FILE" ]; then PREV=$(cat "$FILE"); else PREV=""; fi
          echo "prev=$PREV" >> $GITHUB_OUTPUT

      # 5) 실행 모드/변경여부 결정
      - name: Decide message mode
        id: decide
        env:
          EVENT: ${{ github.event_name }}           # schedule | workflow_dispatch
          PREV:  ${{ steps.prev.outputs.prev }}
          CURR:  ${{ steps.latest.outputs.tag }}
        run: |
          CHANGED="false"
          if [ "$PREV" != "$CURR" ]; then CHANGED="true"; fi
          MODE="auto"
          if [ "$EVENT" = "workflow_dispatch" ]; then MODE="manual"; fi
          echo "changed=$CHANGED" >> $GITHUB_OUTPUT
          echo "mode=$MODE"       >> $GITHUB_OUTPUT

      # 6) Discord 전송(중복 방지 확정 분기)
      - name: Send to Discord
        if: always()
        env:
          WEBHOOK: ${{ steps.hook.outputs.webhook }}
          TAG:  ${{ steps.latest.outputs.tag }}
          DATE: ${{ steps.latest.outputs.date }}
          URL:  ${{ steps.latest.outputs.url }}
          MODE: ${{ steps.decide.outputs.mode }}
          CHG:  ${{ steps.decide.outputs.changed }}
        run: |
          set -e

          send_embed() {
            curl -sS -H "Content-Type: application/json" \
              -d "$(jq -n --arg title "n8n @$TAG released" --arg desc "$DATE" --arg url "$URL" \
                   '{embeds:[{title:$title, description:$desc, url:$url}]}')" \
              -w "\nHTTP %{http_code}\n" "$WEBHOOK"
          }

          send_text() {
            curl -sS -H "Content-Type: application/json" \
              -d "$(jq -n --arg t "$TAG" --arg d "$DATE" \
                   '{content: ("변경 없음 ✅ 현재 최신 릴리스: **" + $t + "** (" + $d + ")")}')" \
              -w "\nHTTP %{http_code}\n" "$WEBHOOK"
          }

          if [ "$MODE" = "manual" ]; then
            # 수동 실행: 새 버전이면 embed, 아니면 텍스트(항상 1회 전송)
            if [ "$CHG" = "true" ]; then
              send_embed
            else
              send_text
            fi
          else
            # 자동 실행: 새 버전일 때만 전송(항상 1회 전송)
            if [ "$CHG" = "true" ]; then
              send_embed
            fi
          fi

      # 7) 새 버전이면 기록 파일 갱신
      - name: Update previous tag file (when changed)
        if: steps.decide.outputs.changed == 'true'
        run: |
          mkdir -p .github
          echo "${{ steps.latest.outputs.tag }}" > .github/n8n_latest
          git config user.name  "actions-bot"
          git config user.email "actions-bot@users.noreply.github.com"
          git add .github/n8n_latest
          git commit -m "chore: update latest n8n tag to ${{ steps.latest.outputs.tag }}"
          git push
